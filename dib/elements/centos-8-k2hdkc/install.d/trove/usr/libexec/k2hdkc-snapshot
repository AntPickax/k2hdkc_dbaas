#!/bin/sh
#
# K2HDKC DBaaS based on Trove
#
# Copyright 2020 Yahoo Japan Corporation
#
# K2HDKC DBaaS is a Database as a Service compatible with Trove which
# is DBaaS for OpenStack.
# Using K2HR3 as backend and incorporating it into Trove to provide
# DBaaS functionality. K2HDKC, K2HR3, CHMPX and K2HASH are components
# provided as AntPickax.
#
# For the full copyright and license information, please view
# the license file that was distributed with this source code.
#
# AUTHOR:   Takeshi Nakatani
# CREATE:   Mon Sep 14 2020
# REVISION:
#

ECHO="/bin/echo"
CAT="/bin/cat"
RM="/bin/rm"
MKDIR="/bin/mkdir"
CHMOD="/bin/chmod"
CHOWN="/bin/chown"
TOUCH="/bin/touch"
GREP="/bin/grep"
HEAD="/bin/head"
TAIL="/bin/tail"
SED="/bin/sed"
AWK="/bin/awk"
WC="/bin/wc"
SUDO="/bin/sudo"

#
# Usage
#
func_usage()
{
	${ECHO} ""
	${ECHO} "Usage:  $1 {--save(-s) | --remove(-rm) | --restore(-r)} <k2hdkc base directory> <snapshot name>"
	${ECHO} "        $1 {--help(-h)}"
	${ECHO} "  -s(--save)               create(save) backup mode."
	${ECHO} "  -rm(--remove)            remove backup mode."
	${ECHO} "  <k2hdkc base directory>  specify the k2hdkc data base directory.(ex: /var/lib/k2hdkc/data)"
	${ECHO} "  <snapshot name>          specify snapshot name which is prefix for backup file."
	${ECHO} "  -h(--help)               print help."
	${ECHO} ""
}

#
# Input Variables
#
SCRIPT_NAME=`basename $0`
PROC_ID=$$
LOG_FILE="/tmp/.${SCRIPT_NAME}-${PROC_ID}.log"
CMD_TMP_FILE="/tmp/.${SCRIPT_NAME}-${PROC_ID}.cmd"
MODE=$1
K2HDKC_BASE_DIR=$2
SNAPSHOT_NAME=$3

#
# Check Variables
#
if [ "X${MODE}" = "X-s" -o "X${MODE}" = "X-S" -o "X${MODE}" = "X--save" -o "X${MODE}" = "X--SAVE" ]; then
	MODE="-s"
elif [ "X${MODE}" = "X-rm" -o "X${MODE}" = "X-RM" -o "X${MODE}" = "X--remove" -o "X${MODE}" = "X--REMOVE" ]; then
	MODE="-rm"
elif [ "X${MODE}" = "X-r" -o "X${MODE}" = "X-R" -o "X${MODE}" = "X--restore" -o "X${MODE}" = "X--RESTORE" ]; then
	MODE="-r"
else
	${ECHO} "[ERROR] Unknown mode option(${MODE})." >${LOG_FILE}
	exit 1
fi
if [ "X${K2HDKC_BASE_DIR}" = "X" ]; then
	${ECHO} "[ERROR] Second parameter is empty, it must be the output base directory path(ex: /var/lib/k2hdkc/data)." >${LOG_FILE}
	exit 1
elif [ ! -d ${K2HDKC_BASE_DIR} ]; then
	${ECHO} "[ERROR] ${K2HDKC_BASE_DIR} is not directory." >${LOG_FILE}
	exit 1
fi
if [ "X${SNAPSHOT_NAME}" = "X" ]; then
	${ECHO} "[ERROR] Third parameter is empty, it must be snap shot name." >${LOG_FILE}
	exit 1
fi

#
# Make local variables
#
K2HDKC_USER="k2hdkc"
K2HDKC_GROUP="k2hdkc"

ARCHIVE_FILE="${SNAPSHOT_NAME}.k2har"
ARCHIVE_FILE_DIR="${K2HDKC_BASE_DIR}/snapshots"

CONFFILE="/etc/k2hdkc/server.ini"

K2HDKC_SERVER_INI_LINECNT=`${WC} -l ${CONFFILE} | ${AWK} '{print $1}'`
K2HDKC_SECTION_START_POS=`${GREP} -n '\[K2HDKC\]' ${CONFFILE} | ${SED} -e 's/:.*//g'`
K2HDKC_SECTION_LINECNT=`expr ${K2HDKC_SERVER_INI_LINECNT} - ${K2HDKC_SECTION_START_POS}`

K2HFILE=`${TAIL} -${K2HDKC_SECTION_LINECNT} ${CONFFILE} | ${GREP} K2HFILE 2>/dev/null | ${HEAD} -1 | ${SED} -e 's/K2HFILE\s*=\s*//' 2>/dev/null`
K2HMASKBIT=`${TAIL} -${K2HDKC_SECTION_LINECNT} ${CONFFILE} | ${GREP} K2HMASKBIT 2>/dev/null | ${HEAD} -1 | ${SED} -e 's/K2HMASKBIT\s*=\s*//' 2>/dev/null`
K2HCMASKBIT=`${TAIL} -${K2HDKC_SECTION_LINECNT} ${CONFFILE} | ${GREP} K2HCMASKBIT  2>/dev/null | ${HEAD} -1 | ${SED} -e 's/K2HCMASKBIT\s*=\s*//' 2>/dev/null`
K2HMAXELE=`${TAIL} -${K2HDKC_SECTION_LINECNT} ${CONFFILE} | ${GREP} K2HMAXELE 2>/dev/null | ${HEAD} -1 | ${SED} -e 's/K2HMAXELE\s*=\s*//' 2>/dev/null`
K2HPAGESIZE=`${TAIL} -${K2HDKC_SECTION_LINECNT} ${CONFFILE} | ${GREP} K2HPAGESIZE 2>/dev/null | ${HEAD} -1 | ${SED} -e 's/K2HPAGESIZE\s*=\s*//' 2>/dev/null`
K2HFULLMAP=`${TAIL} -${K2HDKC_SECTION_LINECNT} ${CONFFILE} | ${GREP} K2HFULLMAP 2>/dev/null | ${HEAD} -1 | ${SED} -e 's/K2HFULLMAP\s*=\s*//' 2>/dev/null`

if [ ! -f ${K2HFILE} ]; then
	if [ "X${MODE}" = "X-s" ]; then
		${ECHO} "[ERROR] k2hdkc data file does not exist." >${LOG_FILE}
		exit 1
	else
		${ECHO} "[WARNING] k2hdkc data file does not exist." >${LOG_FILE}
	fi
fi

#
# Main
#
if [ "X${MODE}" = "X-rm" ]; then
	#
	# Mode: remove
	#
	if [ -f ${ARCHIVE_FILE_DIR}/${ARCHIVE_FILE} ]; then
		${SUDO} ${RM} -f ${ARCHIVE_FILE_DIR}/${ARCHIVE_FILE}
		if [ $? -ne 0 ]; then
			${ECHO} "Failed to remove snapshot file(${ARCHIVE_FILE_DIR}/${ARCHIVE_FILE})" >${LOG_FILE}
			exit 1
		fi
	fi

elif [ "X${MODE}" = "X-s" ]; then
	#
	# Mode: save
	#
	${CAT} <<EOF > ${CMD_TMP_FILE}
ar put ${ARCHIVE_FILE_DIR}/${ARCHIVE_FILE}
exit
EOF

	# check output directory
	if [ ! -d ${K2HDKC_BASE_DIR} ]; then
		${SUDO} ${MKDIR} -p ${K2HDKC_BASE_DIR}
		${SUDO} ${CHOWN} ${K2HDKC_USER}:${K2HDKC_GROUP} ${K2HDKC_BASE_DIR}
	fi
	${SUDO} ${CHMOD} 0777 ${K2HDKC_BASE_DIR}

	if [ ! -d ${ARCHIVE_FILE_DIR} ]; then
		${SUDO} ${MKDIR} -p ${ARCHIVE_FILE_DIR}
		${SUDO} ${CHOWN} ${K2HDKC_USER}:${K2HDKC_GROUP} ${ARCHIVE_FILE_DIR}
	fi
	${SUDO} ${CHMOD} 0777 ${ARCHIVE_FILE_DIR}

	${SUDO} -u ${K2HDKC_USER} k2hlinetool -f ${K2HFILE} -run ${CMD_TMP_FILE} >${LOG_FILE} 2>&1
	if [ $? -ne 0 ]; then
		echo "Failed to create snapshot file(${ARCHIVE_FILE_DIR}/${ARCHIVE_FILE})" >${LOG_FILE}
		exit 1
	fi

elif [ "X${MODE}" = "X-r" ]; then
	# check output directory
	if [ ! -d ${ARCHIVE_FILE_DIR} ]; then
		echo "${ARCHIVE_FILE_DIR} is not existed." >${LOG_FILE}
		exit 1
	fi

	# check k2hash file and its directory
	if [ ! -f ${K2HFILE} ]; then
		# [NOTE]
		# If k2hash file is not existed, this script creates it.
		# Thus this script must check directory permission(owner) for k2hdkc user:group
		#
		K2HFILE_DIR=`dirname ${K2HFILE}`

		${SUDO} -u ${K2HDKC_USER} ${TOUCH} ${K2HFILE} 2>/dev/null
		if [ $? -ne 0 ]; then
			# could not create file, try to change owner:group
			${SUDO} ${CHOWN} ${K2HDKC_USER}:${K2HDKC_GROUP} ${K2HFILE_DIR}
		fi
		${SUDO} ${RM} -f ${K2HFILE}
	fi

	# make k2hlinetool options
	if [ "X${K2HMASKBIT}" != "X" ]; then
		K2HMASKBIT_OPT="-mask ${K2HMASKBIT}"
	else
		K2HMASKBIT_OPT=""
	fi
	if [ "X${K2HCMASKBIT}" != "X" ]; then
		K2HCMASKBIT_OPT="-cmask ${K2HCMASKBIT}"
	else
		K2HCMASKBIT_OPT=""
	fi
	if [ "X${K2HMAXELE}" != "X" ]; then
		K2HMAXELE_OPT="-elementcnt ${K2HMAXELE}"
	else
		K2HMAXELE_OPT=""
	fi
	if [ "X${K2HPAGESIZE}" != "X" ]; then
		K2HPAGESIZE_OPT="-pagesize ${K2HPAGESIZE}"
	else
		K2HPAGESIZE_OPT=""
	fi
	if [ "X${K2HFULLMAP}" = "Xon" -o "X${K2HFULLMAP}" = "XON" -o "X${K2HFULLMAP}" = "Xyes" -o "X${K2HFULLMAP}" = "XYES" -o "X${K2HFULLMAP}" = "Xy" -o "X${K2HFULLMAP}" = "XY" ]; then
		K2HFULLMAP_OPT="-fullmap"
	else
		K2HFULLMAP_OPT=""
	fi

	#
	# Mode: save
	#
	${CAT} <<EOF > ${CMD_TMP_FILE}
ar load ${ARCHIVE_FILE_DIR}/${ARCHIVE_FILE}
exit
EOF

	${SUDO} -u ${K2HDKC_USER} k2hlinetool -f ${K2HFILE} ${K2HMASKBIT_OPT} ${K2HCMASKBIT_OPT} ${K2HMAXELE_OPT} ${K2HPAGESIZE_OPT} ${K2HFULLMAP_OPT} -run ${CMD_TMP_FILE} >${LOG_FILE} 2>&1
	if [ $? -ne 0 ]; then
		echo "Failed to load snapshot file(${ARCHIVE_FILE_DIR}/${ARCHIVE_FILE})" >${LOG_FILE}
		exit 1
	fi
fi

#
# Remove tempolary files
#
${RM} -f ${CMD_TMP_FILE}
${RM} -f ${LOG_FILE}

exit 0

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim600: noexpandtab sw=4 ts=4 fdm=marker
# vim<600: noexpandtab sw=4 ts=4
#
