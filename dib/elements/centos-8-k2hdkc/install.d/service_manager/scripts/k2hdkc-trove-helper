#!/bin/sh
#
# K2HDKC DBaaS based on Trove
#
# Copyright 2020 Yahoo Japan Corporation
#
# K2HDKC DBaaS is a Database as a Service compatible with Trove which
# is DBaaS for OpenStack.
# Using K2HR3 as backend and incorporating it into Trove to provide
# DBaaS functionality. K2HDKC, K2HR3, CHMPX and K2HASH are components
# provided as AntPickax.
# 
# For the full copyright and license information, please view
# the license file that was distributed with this source code.
#
# AUTHOR:   Takeshi Nakatani
# CREATE:   Tue May 26 2020
# REVISION:
#

ECHO="/bin/echo"
SLEEP="/bin/sleep"
CP="/bin/cp"
CAT="/bin/cat"
TR="/bin/tr"
PS="/bin/ps"
SUDO="/bin/sudo"
KILL="/bin/kill"
RM="/bin/rm"
TOUCH="/bin/touch"
DATE="/bin/date"
MV="/bin/mv"

#--------------------------------------------------------------
# Usage and Options
#--------------------------------------------------------------
#
# Usage
#
func_usage()
{
	${ECHO} ""
	${ECHO} "Usage:  $1 {-h(--help) | -start | -stop | options}"
	${ECHO} "  -h(--help)                print help."
	${ECHO} "  -start                    start k2hdkc cluster(default)"
	${ECHO} "  -stop                     stop k2hdkc cluster"
	${ECHO} "  -cgp <dir>                specify output directory path for configuration group parameters and etc.(default: /etc/k2hdkc)"
	${ECHO} "  -startup_timeout <sec>    specify starup timeout seconds(default: 60s)"
	${ECHO} "  -normal_timeout <sec>     specify normal(after startup) timeout seconds(default: 1s)"
	${ECHO} ""
}

#
# Check options
#
PRGNAME=`/bin/basename $0`
SCRIPTDIR=`/bin/dirname $0`
CONFIGGROUP_PARAM_DIR=""
STARTUP_TIMEOUT=
NORMAL_TIMEOUT=
PROCESS_MODE=

while [ $# -ne 0 ]; do
	if [ "X$1" = "X" ]; then
		break;

	elif [ "X$1" = "X-h" -o "X$1" = "X-H" -o "X$1" = "X--HELP" -o "X$1" = "X--help" ]; then
		func_usage $PRGNAME
		exit 0

	elif [ "X$1" = "X-start" -o "X$1" = "X-START" ]; then
		if [ "X${PROCESS_MODE}" != "X" ]; then
			${ECHO} "Already specified process mode parameter(${PROCESS_MODE})."
			exit 1
		fi
		PROCESS_MODE="start"

	elif [ "X$1" = "X-stop" -o "X$1" = "X-STOP" ]; then
		if [ "X${PROCESS_MODE}" != "X" ]; then
			${ECHO} "Already specified process mode parameter(${PROCESS_MODE})."
			exit 1
		fi
		PROCESS_MODE="stop"

	elif [ "X$1" = "X-cgp" -o "X$1" = "X-CGP" ]; then
		shift
		if [ "X$1" = "X" ]; then
			${ECHO} "No parameter is specified for option(-cgp), check usage with the -h option."
			exit 1
		fi
		CONFIGGROUP_PARAM_DIR=$1

	elif [ "X$1" = "X-startup_timeout" -o "X$1" = "X-STARTUP_TIMOUT" ]; then
		shift
		if [ "X$1" = "X" ]; then
			${ECHO} "No parameter is specified for option(-startup_timeout), check usage with the -h option."
			exit 1
		fi
		# check number
		expr "$1" + 1 >/dev/null 2>&1
		if [ $? -ge 1 ]; then
			${ECHO} "The option(-startup_timeout) parameter is not number($1), check usage with the -h option."
			exit 1
		fi
		if [ $1 -lt 0 ]; then
			${ECHO} "The option(-startup_timeout) parameter must be positive value($1) or zero, check usage with the -h option."
			exit 1
		fi
		STARTUP_TIMEOUT=$1

	elif [ "X$1" = "X-normal_timeout" -o "X$1" = "X-NORMAL_TIMOUT" ]; then
		shift
		if [ "X$1" = "X" ]; then
			${ECHO} "No parameter is specified for option(-normal_timeout), check usage with the -h option."
			exit 1
		fi
		# check number
		expr "$1" + 1 >/dev/null 2>&1
		if [ $? -ge 1 ]; then
			${ECHO} "The option(-normal_timeout) parameter is not number($1), check usage with the -h option."
			exit 1
		fi
		if [ $1 -lt 0 ]; then
			${ECHO} "The option(-normal_timeout) parameter must be positive value($1) or zero, check usage with the -h option."
			exit 1
		fi
		NORMAL_TIMEOUT=$1

	else
		${ECHO} "Unknown option: $1, check usage with the -h option."
		exit 1
	fi
	shift
done

#
# Set default values
#
if [ "X${PROCESS_MODE}" = "X" ]; then
	PROCESS_MODE="start"
fi
if [ "X${CONFIGGROUP_PARAM_DIR}" = "X" ]; then
	CONFIGGROUP_PARAM_DIR="/etc/k2hdkc"
fi
if [ "X${STARTUP_TIMEOUT}" = "X" ]; then
	STARTUP_TIMEOUT=60
fi
if [ "X${NORMAL_TIMEOUT}" = "X" ]; then
	NORMAL_TIMEOUT=1
fi

#--------------------------------------------------------------
# Commmon values
#--------------------------------------------------------------
#
# Configuration Group parameters
#
CONFFILE_EXTDATA_URL="extdata-url"
CONFFILE_GROUP="cluster-name"
CONFFILE_PORT="chmpx-server-port"
CONFFILE_CTLPORT="chmpx-server-ctlport"
CONFFILE_SLAVE_CTLPORT="chmpx-slave-ctlport"

STARTUP_MARKING_FILE="${CONFIGGROUP_PARAM_DIR}/k2hdkc-startup-time"
OLD_MANDATORY_PARAM_FILE="${CONFIGGROUP_PARAM_DIR}/mandatory-params"

CONFFILE_EXTDATA_SH="extdata_k2hr3_trove.sh"
TROVE_EXTDATA_SH_FILE="${CONFIGGROUP_PARAM_DIR}/${CONFFILE_EXTDATA_SH}"
CLIENT_USER_AGENT="extdata_k2hr3_trove"

#
# Check running at startup
#
if [ ! -f ${STARTUP_MARKING_FILE} ]; then
	${DATE} > ${STARTUP_MARKING_FILE} 2>/dev/null
	TIMEOUT_SECOND=${STARTUP_TIMEOUT}
else
	${DATE} >> ${STARTUP_MARKING_FILE} 2>/dev/null
	TIMEOUT_SECOND=${NORMAL_TIMEOUT}
fi

#--------------------------------------------------------------
# Message functions
#--------------------------------------------------------------
#
# Message functions
#
ERROR_MESSAGE_BUFF=""
DEBUG_MESSAGE_BUFF=""
reset_message()
{
	ERROR_MESSAGE_BUFF=""
	DEBUG_MESSAGE_BUFF=""
}

set_error()
{
	ERROR_MESSAGE_BUFF="$1"
}

add_error()
{
	if [ "X${ERROR_MESSAGE_BUFF}" = "X" ]; then
		ERROR_MESSAGE_BUFF="$1"
	else
		ERROR_MESSAGE_BUFF="${ERROR_MESSAGE_BUFF} : $1"
	fi
}

insert_error()
{
	if [ "X${ERROR_MESSAGE_BUFF} "= "X" ]; then
		ERROR_MESSAGE_BUFF="$1"
	else
		ERROR_MESSAGE_BUFF="$1 : ${ERROR_MESSAGE_BUFF}"
	fi
}

set_debug()
{
	DEBUG_MESSAGE_BUFF="$1"
}

print_message()
{
	if [ "X${ERROR_MESSAGE_BUFF}" != "X" ]; then
		echo "[ERROR] ${ERROR_MESSAGE_BUFF}"
	fi
	if [ "X${DEBUG_MESSAGE_BUFF}" != "X" ]; then
		echo "[DEBUG] ${DEBUG_MESSAGE_BUFF}"
	fi
	reset_message

	if [ "X$1" != "X" ]; then
		echo "[MESSAGE] $1"
	fi
}

#--------------------------------------------------------------
# Utility functions
#--------------------------------------------------------------
#
# Load extdata for script
#
# $1	extdata url
#
load_extdata_script()
{
	_LOAD_LOCAL_EXTDATA_URL=$1

	if [ "X${_LOAD_LOCAL_EXTDATA_URL}" = "X" ]; then
		add_error "The parameter is empty(extdata url=${_LOAD_LOCAL_EXTDATA_URL})"
		return 1
	fi

	#
	# Get extdata for script
	#
	GET_EXTDATA_RESULT=`curl -s -S -X GET -H "User-Agent: ${CLIENT_USER_AGENT}" -w "%{http_code}\n" -o ${TROVE_EXTDATA_SH_FILE} ${_LOAD_LOCAL_EXTDATA_URL} 2>&1`
	if [ "X${GET_EXTDATA_RESULT}" != "X200" ];then
		add_error "Could not get extdata with status(${GET_EXTDATA_RESULT}) from \"${_LOAD_LOCAL_EXTDATA_URL}\""
		return 1
	fi
	if [ ! -f ${TROVE_EXTDATA_SH_FILE} -o ! -s ${TROVE_EXTDATA_SH_FILE} ]; then
		add_error "Could not get extdata(empty) from \"${_LOAD_LOCAL_EXTDATA_URL}\""
		return 1
	fi

	#
	# Check extdata contents(it must be shell script)
	#
	CHECK_WORDS=`head -1 ${TROVE_EXTDATA_SH_FILE} 2>/dev/null | cut -c 1-2 2>/dev/null`
	if [ "X${CHECK_WORDS}" != "X#!" ]; then
		add_error "Loaded extdata does not start #! at first line."
		return 1
	fi
	chmod 0555 ${TROVE_EXTDATA_SH_FILE} 2>/dev/null
	if [ $? -ne 0 ]; then
		add_error "Could not set executable permission to ${TROVE_EXTDATA_SH_FILE}."
		return 1
	fi

	return 0;
}

#
# Register Instance
#
# $1	extdata url
#
register_instance()
{
	reset_message

	#
	# Get extdata for script
	#
	LOAD_EXTDATA_RESULT_MSG=`load_extdata_script $1`
	if [ $? -ne 0 ]; then
		insert_error "Failed to load extdata for script"
		return 1
	fi

	#
	# Register instance
	#
	REGISTER_RESULT_MSG=`${TROVE_EXTDATA_SH_FILE} -r`
	if [ $? -ne 0 ]; then
		set_error "Failed to register instance"
		add_error "${REGISTER_RESULT_MSG}"
		return 1
	fi

	return 0
}

#
# Delete Instance
#
delete_instance()
{
	reset_message

	#
	# Check extdata for script
	#
	if [ ! -f ${TROVE_EXTDATA_SH_FILE} ]; then
		set_error "Not found ${TROVE_EXTDATA_SH_FILE} for deleting instance."
		return 1;
	fi

	#
	# Delete instance
	#
	DELETE_RESULT_MSG=`${TROVE_EXTDATA_SH_FILE} -d`
	if [ $? -ne 0 ]; then
		set_error "Failed to delete instance"
		add_error "${DELETE_RESULT_MSG}"
		return 1
	fi

	return 0
}

#--------------------------------------------------------------
# Main
#--------------------------------------------------------------
if [ "X${PROCESS_MODE}" = "Xstart" ]; then
	###########################
	# Start
	###########################
	START_UNIXTIME=`/bin/date '+%s'`
	LAG_UNIXTIME=0

	${ECHO} "Start at ${START_UNIXTIME}"
	while [ ${LAG_UNIXTIME} -le ${TIMEOUT_SECOND} ]; do
		IS_BREAK_LOOP=0

		reset_message
		print_message "Start to main loop"

		#
		# Load new mandatory parameters
		#
		# [NOTE]
		# Other than CONFFILE_EXTDATA_URL(extdata-url), those only check the existence of the value.
		#
		if [ -f ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_EXTDATA_URL} -a -s ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_EXTDATA_URL} ]; then
			CURRENT_EXTDATA_URL=`${CAT} ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_EXTDATA_URL} | ${TR} -d '\n'`
	        if [ "X${CURRENT_EXTDATA_URL}" = "XNone" ]; then
				CURRENT_EXTDATA_URL=""
	        fi
		else
			CURRENT_EXTDATA_URL=""
		fi
		if [ -f ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_GROUP} -a -s ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_GROUP} ]; then
			CURRENT_GROUP=`${CAT} ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_GROUP} | ${TR} -d '\n'`
	        if [ "X${CURRENT_GROUP}" = "XNone" ]; then
				CURRENT_GROUP=""
	        fi
		else
			CURRENT_GROUP=""
		fi
		if [ -f ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_PORT} -a -s ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_PORT} ]; then
			CURRENT_PORT=`${CAT} ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_PORT} | ${TR} -d '\n'`
	        if [ "X${CURRENT_PORT}" = "XNone" ]; then
				CURRENT_PORT=""
	        fi
		else
			CURRENT_PORT=""
		fi
		if [ -f ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_CTLPORT} -a -s ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_CTLPORT} ]; then
			CURRENT_CTLPORT=`${CAT} ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_CTLPORT} | ${TR} -d '\n'`
	        if [ "X${CURRENT_CTLPORT}" = "XNone" ]; then
				CURRENT_CTLPORT=""
	        fi
		else
			CURRENT_CTLPORT=""
		fi
		if [ -f ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_SLAVE_CTLPORT} -a -s ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_SLAVE_CTLPORT} ]; then
			CURRENT_SLAVE_CTLPORT=`${CAT} ${CONFIGGROUP_PARAM_DIR}/${CONFFILE_SLAVE_CTLPORT} | ${TR} -d '\n'`
	        if [ "X${CURRENT_SLAVE_CTLPORT}" = "XNone" ]; then
				CURRENT_SLAVE_CTLPORT=""
	        fi
		else
			CURRENT_SLAVE_CTLPORT=""
		fi

		#
		# Load old mandatory compressed parameters
		#
		if [ -f ${OLD_MANDATORY_PARAM_FILE} ]; then
			OLD_MANDATORY_PARAMS=`${CAT} ${OLD_MANDATORY_PARAM_FILE} 2>/dev/null | ${TR} -d '\n'`
			if [ "X${OLD_MANDATORY_PARAMS}" = "X" ]; then
				OLD_MANDATORY_PARAMS=",,,,"
			fi
		else
			OLD_MANDATORY_PARAMS=",,,,"
		fi

		#
		# Check mandatory parameters
		#
		NEW_MANDATORY_PARAMS="${CURRENT_EXTDATA_URL},${CURRENT_GROUP},${CURRENT_PORT},${CURRENT_CTLPORT},${CURRENT_SLAVE_CTLPORT}"
		if [ "X${NEW_MANDATORY_PARAMS}" = "X${OLD_MANDATORY_PARAMS}" ]; then
			NOCHANGE_MANDATORY_PARAMS=1
		else
			NOCHANGE_MANDATORY_PARAMS=0
		fi
		if [ "X${CURRENT_EXTDATA_URL}" = "X" -o "X${CURRENT_GROUP}" = "X" -o "X${CURRENT_PORT}" = "X" -o "X${CURRENT_CTLPORT}" = "X" -o "X${CURRENT_SLAVE_CTLPORT}" = "X" ]; then
			DEFICIENT_MANDATORY_PARAMS=1
		else
			DEFICIENT_MANDATORY_PARAMS=0
		fi

		#
		# Update configuration files and control processes
		#
		if [ ${NOCHANGE_MANDATORY_PARAMS} -eq 1 ]; then
			#
			# Same mandatory parameters, Nothing to do.
			#
			print_message "Required parameters remain empty as before, then nothing to do."
			IS_BREAK_LOOP=1

		else
			#
			# Changed mandatory parameters
			#

			#
			# Delete registration for this instance from K2HR3
			#
			delete_instance
			if [ $? -ne 0 ]; then
				print_message "Something error is occurred in removing instance, but continue..."
			else
				print_message
			fi

			#
			# New mandatory parameters are existed, restart processes
			#
			if [ ${DEFICIENT_MANDATORY_PARAMS} -ne 1 ]; then
				#
				# Register instance to K2HR3
				#
				register_instance ${CURRENT_EXTDATA_URL}
				if [ $? -ne 0 ]; then
					print_message "Something error is occurred in registering instance, but continue..."
				else
					print_message
					IS_BREAK_LOOP=1
				fi
			else
				IS_BREAK_LOOP=1
			fi
		fi

		if [ ${IS_BREAK_LOOP} -eq 1 ]; then
			echo ${NEW_MANDATORY_PARAMS} > ${OLD_MANDATORY_PARAM_FILE}
			print_message "Finish to run without any error"
			break;
		fi

		${SLEEP} 1
		EXEC_UNIXTIME=`/bin/date '+%s'`
		LAG_UNIXTIME=`expr ${EXEC_UNIXTIME} - ${START_UNIXTIME}`
	done

	if [ ${LAG_UNIXTIME} -gt ${TIMEOUT_SECOND} ]; then
		print_message  "Failed (un)registration by timeout(${TIMEOUT_SECOND}s)"
	fi

else
	###########################
	# Stop
	###########################
	STOP_UNIXTIME=`/bin/date '+%s'`
	${ECHO} "Stop at ${STOP_UNIXTIME}"

	#
	# Delete registration for this instance from K2HR3
	#
	delete_instance
	if [ $? -ne 0 ]; then
		print_message "Something error is occurred in removing instance, but continue..."
	else
		print_message
	fi

	#
	# Remove mandatory compressed parameter file
	#
	if [ -f ${OLD_MANDATORY_PARAM_FILE} ]; then
		${RM} -f ${OLD_MANDATORY_PARAM_FILE}
		print_message "Succeed to remove ${OLD_MANDATORY_PARAM_FILE}"
	fi

	print_message "Finish to stop processes"
fi

exit 0

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim600: noexpandtab sw=4 ts=4 fdm=marker
# vim<600: noexpandtab sw=4 ts=4
#
