#!/bin/sh
#
# K2HDKC DBaaS based on Trove
#
# Copyright 2020 Yahoo Japan Corporation
#
# K2HDKC DBaaS is a Database as a Service compatible with Trove which
# is DBaaS for OpenStack.
# Using K2HR3 as backend and incorporating it into Trove to provide
# DBaaS functionality. K2HDKC, K2HR3, CHMPX and K2HASH are components
# provided as AntPickax.
# 
# For the full copyright and license information, please view
# the license file that was distributed with this source code.
#
# AUTHOR:   Takeshi Nakatani
# CREATE:   Mon Sep 14 2020
# REVISION:
#

SCRIPTNAME="k2hr3-init-trove"
LOGFILE="/var/log/${SCRIPTNAME}.log"
CLOUDINIT_DATA_DIR="/var/lib/cloud/data"
INSTANCE_ID_FILE="${CLOUDINIT_DATA_DIR}/instance-id"
K2HR3_ROLE_FILE="${CLOUDINIT_DATA_DIR}/k2hr3-role"
K2HR3_RESOURCE_FILE="${CLOUDINIT_DATA_DIR}/k2hr3-resource"
K2HR3_API_RESOURCE_URI_FILE="${CLOUDINIT_DATA_DIR}/k2hr3-resource-uri"
K2HR3_CUK_FILE="${CLOUDINIT_DATA_DIR}/k2hr3-cuk"
K2HR3_APIARG_FILE="${CLOUDINIT_DATA_DIR}/k2hr3-apiarg"
K2HR3_EXTRAARG_FILE="${CLOUDINIT_DATA_DIR}/k2hr3-extraarg"
K2HR3_TAGARG_FILE="${CLOUDINIT_DATA_DIR}/k2hr3-tagarg"

K2HR3_USER_ROLE_TOKEN="{{= %K2HR3_ROLE_TOKEN% }}"
K2HR3_API_HOST_URI="{{= %K2HR3_API_HOST_URI% }}/v1/role"
K2HR3_ROLE_NAME="{{= %K2HR3_ROLE_NAME% }}"

#--------------------------------------------------------------
# Start
#--------------------------------------------------------------
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Start to initialize information for k2hr3" | tee -a ${LOGFILE}

#--------------------------------------------------------------
# OS Environment
#--------------------------------------------------------------
OS_NAME=`cat /etc/os-release | grep '^ID=' | sed -e 's/\"/ /g' -e 's/=/ /g' | awk '{print $2}'`
if [ "X${OS_NAME}" = "Xubuntu" ]; then
	PACKAGECLOUD_IO_URI="https://packagecloud.io/install/repositories/antpickax/stable/script.deb.sh"
	PACKAGEMAN="apt-get"
	SYSTEMD_SERVICE_DIR="/lib/systemd/system"
	SYSTEMD_EXEC_DIR="/usr/bin"
elif [ "X${OS_NAME}" = "Xcentos" ]; then
	PACKAGECLOUD_IO_URI="https://packagecloud.io/install/repositories/antpickax/stable/script.rpm.sh"
	PACKAGEMAN="yum"
	SYSTEMD_SERVICE_DIR="/usr/lib/systemd/system"
	SYSTEMD_EXEC_DIR="/usr/libexec"
else
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Unknown os name ${OS_NAME} which is not supported." | tee -a ${LOGFILE}
	exit 1
fi

#
# Python
#
python --version >/dev/null 2>&1
if [ $? -eq 0 ]; then
	PYBIN="python"
else
	python3 --version >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		PYBIN="python3"
	else
		echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Not found python nor python3." | tee -a ${LOGFILE}
		exit 1
	fi
fi

#--------------------------------------------------------------
# Check instance-id
#--------------------------------------------------------------
if [ ! -f ${INSTANCE_ID_FILE} ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not read ${INSTANCE_ID_FILE}" | tee -a ${LOGFILE}
	exit 1
fi
INSTANCE_ID=`cat ${INSTANCE_ID_FILE}`
if [ "X${INSTANCE_ID}" = "X" ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Unknown Instance Id in ${INSTANCE_ID_FILE}" | tee -a ${LOGFILE}
	exit 1
fi

#--------------------------------------------------------------
# Registration
#--------------------------------------------------------------
CUK_PARAMETER="cuk=${INSTANCE_ID}"
EXTRA_PARAMETER="extra=openstack-auto-v1"
LOCAL_HOSTNAME=`hostname`
TAG_PARAMETER="tag=${LOCAL_HOSTNAME}"

REGISTER_RESULT=`curl -s -S -X PUT -H "x-auth-token: R=${K2HR3_USER_ROLE_TOKEN}" "${K2HR3_API_HOST_URI}/${K2HR3_ROLE_NAME}?${CUK_PARAMETER}&${EXTRA_PARAMETER}&${TAG_PARAMETER}" 2>&1`
if [ $? -ne 0 ];then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not register to role member with curl error" | tee -a ${LOGFILE}
	exit 1
fi
REGISTER_RESULT_VALUE=`echo ${REGISTER_RESULT} | ${PYBIN} -m json.tool | grep result | cut -d':' -f2,2 | sed 's/^[ ,]\+\|[ ,]\+$//g' | tr '[:lower:]' '[:upper:]'`
if [ "X${REGISTER_RESULT_VALUE}" != "XTRUE" ]; then
	REGISTER_RESULT_MSG=`echo ${REGISTER_RESULT} | ${PYBIN} -m json.tool | grep message | cut -d':' -f2,2 | sed 's/^[ ,]\+\|[ ,]\+$//g'`
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Failed to put access for registering by ${REGISTER_RESULT_MSG}" | tee -a ${LOGFILE}
	exit 1
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Set this host to k2hr3 role(${K2HR3_ROLE_NAME})" | tee -a ${LOGFILE}

#--------------------------------------------------------------
# Save parameters to files
#--------------------------------------------------------------
K2HR3_RESOURCE_NAME=`echo ${K2HR3_ROLE_NAME} | sed 's/:role:/:resource:/'`
K2HR3_API_RESOURCE_URI=`echo ${K2HR3_API_HOST_URI} | sed 's#/v1/role#/v1/resource#'`

#
# ROLE name
#
echo "${K2HR3_ROLE_NAME}" > ${K2HR3_ROLE_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not put k2hr3 role name(${K2HR3_ROLE_NAME}) to ${K2HR3_ROLE_FILE}" | tee -a ${LOGFILE}
	exit 1
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create k2hr3 role(${K2HR3_ROLE_NAME}) file(${K2HR3_ROLE_FILE})" | tee -a ${LOGFILE}

chmod 444 ${K2HR3_ROLE_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[WARN]: Could not change mode for ${K2HR3_ROLE_FILE}, but continue..." | tee -a ${LOGFILE}
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: initialize role name information for k2hr3" | tee -a ${LOGFILE}

#
# RESOURCE name
#
echo "${K2HR3_RESOURCE_NAME}" > ${K2HR3_RESOURCE_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not put k2hr3 resource name(${K2HR3_RESOURCE_NAME}) to ${K2HR3_RESOURCE_FILE}" | tee -a ${LOGFILE}
	exit 1
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create k2hr3 resource(${K2HR3_RESOURCE_NAME}) file(${K2HR3_RESOURCE_FILE})" | tee -a ${LOGFILE}

chmod 444 ${K2HR3_RESOURCE_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[WARN]: Could not change mode for ${K2HR3_RESOURCE_FILE}, but continue..." | tee -a ${LOGFILE}
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: initialize resoruce name information for k2hr3" | tee -a ${LOGFILE}

#
# RESOURCE API url
#
echo "${K2HR3_API_RESOURCE_URI}" > ${K2HR3_API_RESOURCE_URI_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not put k2hr3 api resource uri(${K2HR3_API_RESOURCE_URI}) to ${K2HR3_API_RESOURCE_URI_FILE}" | tee -a ${LOGFILE}
	exit 1
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create k2hr3 api resource uri(${K2HR3_API_RESOURCE_URI}) file(${K2HR3_API_RESOURCE_URI_FILE})" | tee -a ${LOGFILE}

chmod 444 ${K2HR3_API_RESOURCE_URI_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[WARN]: Could not change mode for ${K2HR3_API_RESOURCE_URI_FILE}, but continue..." | tee -a ${LOGFILE}
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: initialize resoruce uri information for k2hr3" | tee -a ${LOGFILE}

#
# CUK(instance-id)
#
echo "${INSTANCE_ID}" > ${K2HR3_CUK_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not put cuk=instanceid(${INSTANCE_ID}) to ${K2HR3_CUK_FILE}" | tee -a ${LOGFILE}
	exit 1
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create cuk=instanceid(${INSTANCE_ID}) file(${K2HR3_CUK_FILE})" | tee -a ${LOGFILE}

chmod 444 ${K2HR3_CUK_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[WARN]: Could not change mode for ${K2HR3_CUK_FILE}, but continue..." | tee -a ${LOGFILE}
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: initialize cuk(instanceid) information for k2hr3" | tee -a ${LOGFILE}

#
# CUK apiarg
#
echo "${CUK_PARAMETER}" > ${K2HR3_APIARG_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not put api url argument(${CUK_PARAMETER}) to ${K2HR3_APIARG_FILE}" | tee -a ${LOGFILE}
	exit 1
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create api url argument(${CUK_PARAMETER}) file(${K2HR3_APIARG_FILE})" | tee -a ${LOGFILE}

chmod 444 ${K2HR3_APIARG_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[WARN]: Could not change mode for ${K2HR3_APIARG_FILE}, but continue..." | tee -a ${LOGFILE}
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: initialize cuk information for k2hr3" | tee -a ${LOGFILE}


#
# EXTRA apiarg
#
echo "${EXTRA_PARAMETER}" > ${K2HR3_EXTRAARG_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not put extra url argument(${EXTRA_PARAMETER}) to ${K2HR3_EXTRAARG_FILE}" | tee -a ${LOGFILE}
	exit 1
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create extra url argument(${EXTRA_PARAMETER}) file(${K2HR3_EXTRAARG_FILE})" | tee -a ${LOGFILE}

chmod 444 ${K2HR3_EXTRAARG_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[WARN]: Could not change mode for ${K2HR3_EXTRAARG_FILE}, but continue..." | tee -a ${LOGFILE}
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: initialize extra api arg information for k2hr3" | tee -a ${LOGFILE}

#
# TAG apiarg
#
echo "${TAG_PARAMETER}" > ${K2HR3_TAGARG_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not put tag url argument(${TAG_PARAMETER}) to ${K2HR3_TAGARG_FILE}" | tee -a ${LOGFILE}
	exit 1
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create tag url argument(${TAG_PARAMETER}) file(${K2HR3_TAGARG_FILE})" | tee -a ${LOGFILE}

chmod 444 ${K2HR3_TAGARG_FILE}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[WARN]: Could not change mode for ${K2HR3_TAGARG_FILE}, but continue..." | tee -a ${LOGFILE}
fi
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: initialize tag api arg information for k2hr3" | tee -a ${LOGFILE}

#--------------------------------------------------------------
# Systemd symbols
#--------------------------------------------------------------
K2HR3_SLAVE_CHECK_CONF_SERVICE="k2hdkc-slave-check-conf.service"
K2HR3_SLAVE_CHECK_CONF_SERVICE_FILE="${SYSTEMD_SERVICE_DIR}/${K2HR3_SLAVE_CHECK_CONF_SERVICE}"

K2HR3_SLAVE_CHECK_CONF_TIMER="k2hdkc-slave-check-conf.timer"
K2HR3_SLAVE_CHECK_CONF_TIMER_FILE="${SYSTEMD_SERVICE_DIR}/${K2HR3_SLAVE_CHECK_CONF_TIMER}"

K2HR3_SLAVE_CHECK_CONF_SH="k2hdkc-slave-check-conf"
K2HR3_SLAVE_CHECK_CONF_SH_FILE="${SYSTEMD_EXEC_DIR}/${K2HR3_SLAVE_CHECK_CONF_SH}"

#--------------------------------------------------------------
# Output k2hdkc-slave-check-conf.service
#--------------------------------------------------------------
cat <<EOF > ${K2HR3_SLAVE_CHECK_CONF_SERVICE_FILE}
[Unit]
Description=k2hdkc slave check configration service

[Service]
Type=oneshot
User=root
ExecStart=${K2HR3_SLAVE_CHECK_CONF_SH_FILE}
EOF

echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create ${K2HR3_SLAVE_CHECK_CONF_SERVICE_FILE} file" | tee -a ${LOGFILE}

#--------------------------------------------------------------
# Output k2hdkc-slave-check-conf.timer
#--------------------------------------------------------------
cat <<EOF > ${K2HR3_SLAVE_CHECK_CONF_TIMER_FILE}
[Unit]
Description=k2hdkc slave check configration timer

[Timer]
OnStartupSec=2min
OnUnitInactiveSec=1min
Unit=${K2HR3_SLAVE_CHECK_CONF_SERVICE}

[Install]
WantedBy=multi-user.target
EOF

echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create ${K2HR3_SLAVE_CHECK_CONF_TIMER_FILE} file" | tee -a ${LOGFILE}

#--------------------------------------------------------------
# Output k2hdkc-slave-check-conf script
#--------------------------------------------------------------
cat <<EOF > ${K2HR3_SLAVE_CHECK_CONF_SH_FILE}
#!/bin/sh
#
# K2HDKC Cluster on OpenStack Trove
#
# Copyright 2020 Yahoo! Japan Corporation.
#
# A utility that links the K2HDKC cluster as a Database as a Service
# (DBaaS) with the OpenStack Trove system.
# This system is a DBaaS that operates a K2HDKC cluster by controlling
# from Trove (OpenStack) and K2HR3. 
# K2HDKC is a distributed KVS(Key Value Store) provided by Yahoo! JAPAN.
#
# For the full copyright and license information, please view
# the license file that was distributed with this source code.
#
# AUTHOR:   Takeshi Nakatani
# CREATE:   Thr Jun 4 2020
# REVISION:
#

###################################
# Common variables
###################################
ECHO="/bin/echo"
MV="/bin/mv"
RM="/bin/rm"
MKDIR="/bin/mkdir"
GREP="/bin/grep"
SED="/bin/sed"

#
# Escape sequence
#
CDEF=\$(printf '\033[0m')
CREV=\$(printf '\033[7m')
CRED=\$(printf '\033[31m')
CGRN=\$(printf '\033[32m')

#
# Local variables
#
CURRENT_TIME=\`date "+%Y-%m-%d %H:%M:%S,%3N"\`

###################################
# Variables
###################################
PRGNAME=\`basename \$0\`
SCRIPTDIR=\`dirname \$0\`

K2HDKC_CONF_DIR="/etc/k2hdkc"
K2HDKC_CONF_NAME="slave.ini"
K2HDKC_CONF_TMP_NAME="\${K2HDKC_CONF_NAME}.tmp"
K2HDKC_CONF_FILE="\${K2HDKC_CONF_DIR}/\${K2HDKC_CONF_NAME}"
K2HDKC_CONF_TMP_FILE="\${K2HDKC_CONF_DIR}/\${K2HDKC_CONF_TMP_NAME}"

#
# Instance id / resource name / resource uri
#
CLOUDINIT_DATA_DIR="/var/lib/cloud/data"
INSTANCE_ID_FILE="\${CLOUDINIT_DATA_DIR}/instance-id"
K2HR3_ROLE_FILE="\${CLOUDINIT_DATA_DIR}/k2hr3-role"
K2HR3_RESOURCE_FILE="\${CLOUDINIT_DATA_DIR}/k2hr3-resource"
K2HR3_API_RESOURCE_URI_FILE="\${CLOUDINIT_DATA_DIR}/k2hr3-resource-uri"

INSTANCE_ID=\`cat \${INSTANCE_ID_FILE}\`
K2HR3_ROLE_NAME=\`cat \${K2HR3_ROLE_FILE}\`
K2HR3_RESOURCE_NAME=\`cat \${K2HR3_RESOURCE_FILE}\`
K2HR3_API_RESOURCE_URI=\`cat \${K2HR3_API_RESOURCE_URI_FILE}\`

#
# Python
#
python --version >/dev/null 2>&1
if [ \$? -eq 0 ]; then
	PYBIN="python"
else
	python3 --version >/dev/null 2>&1
	if [ \$? -eq 0 ]; then
		PYBIN="python3"
	else
		\${ECHO} "\${CRED}\${CREV}[ERROR]\${CDEF}\${CRED} The python program could not be found\${CDEF}" 1>&2
		exit 1
	fi
fi

###################################
# Main
###################################
\${ECHO} "\${CGRN}\${CREV}[MSG]\${CDEF} \${CURRENT_TIME} Start to load resource(\${K2HDKC_CONF_NAME}) from K2HR3." 1>&2

#
# Check directory
#
if [ ! -d \${K2HDKC_CONF_DIR} ]; then
	\${ECHO} "\${CRED}\${CREV}[WARN]\${CDEF}\${CRED} Not found \${K2HDKC_CONF_DIR} directory, thus try to create it.\${CDEF}" 1>&2

	\${MKDIR} -p \${K2HDKC_CONF_DIR}
	if [ \$? -ne 0 ];then
		\${ECHO} "\${CRED}\${CREV}[ERROR]\${CDEF}\${CRED} Could not create \${K2HDKC_CONF_DIR}.\${CDEF}" 1>&2
		exit 1
	fi
fi

#
# Remove temporary file if exists
#
if [ -f \${K2HDKC_CONF_TMP_FILE} ]; then
	\${ECHO} "\${CRED}\${CREV}[WARN]\${CDEF}\${CRED} Found \${K2HDKC_CONF_TMP_FILE} for temporary file, thus remove it.\${CDEF}" 1>&2
	\${RM} -f \${K2HDKC_CONF_TMP_FILE}
fi

#
# Get resource
#
RESOURCE_RESULT=\`curl -s -S -X GET -H "Content-Type: application/json" "\${K2HR3_API_RESOURCE_URI}/\${K2HR3_RESOURCE_NAME}?\${CUK_PARAMETER}&role=\${K2HR3_ROLE_NAME}&type=string" 2>&1\`
if [ \$? -ne 0 ];then
	\${ECHO} "\${CRED}\${CREV}[ERROR]\${CDEF}\${CRED} Could not get resource.\${CDEF}" 1>&2
	exit 1
fi
RESOURCE_RESULT_VALUE=\`\${ECHO} \${RESOURCE_RESULT} | \${PYBIN} -m json.tool | \${GREP} result | cut -d':' -f2,2 | \${SED} 's/^[ ,]\+\|[ ,]\+\$//g' | tr '[:lower:]' '[:upper:]'\`
if [ "X\${RESOURCE_RESULT_VALUE}" != "XTRUE" ]; then
	RESOURCE_RESULT_MSG=\`\${ECHO} \${RESOURCE_RESULT} | \${PYBIN} -m json.tool | \${GREP} message | cut -d':' -f2,2 | \${SED} 's/^[ ,]\+\|[ ,]\+\$//g'\`
	\${ECHO} "\${CRED}\${CREV}[ERROR]\${CDEF}\${CRED} Failed to get resource by \"\${RESOURCE_RESULT_MSG}\".\${CDEF}" 1>&2
	exit 1
fi
\${ECHO} "\${CGRN}\${CREV}[SUCCESS]\${CDEF} \${CURRENT_TIME} Get resource(\${K2HR3_RESOURCE_NAME}).\${CDEF}" 1>&2

#
# Save resource as K2HDKC_CONF_TMP_FILE
#
\${ECHO} \${RESOURCE_RESULT} | \${PYBIN} -m json.tool | \${GREP} '"resource": ' | \${SED} -e 's/"resource"://g' -e 's/^[ ,]\+\|[ ,]\+\$//g' -e 's/^\"//g' -e 's/\"\$//g' -e 's/\\\\n/\n/g' | \${SED} -e "s/__TROVE_K2HDKC_SELF_CUK__/\${INSTANCE_ID}/g" > \${K2HDKC_CONF_TMP_FILE}
if [ ! -f \${K2HDKC_CONF_TMP_FILE} ]; then
	\${ECHO} "\${CRED}\${CREV}[ERROR]\${CDEF}\${CRED} Could not make \${K2HDKC_CONF_TMP_FILE} from resource.\${CDEF}" 1>&2
	exit 1
fi
if [ ! -s \${K2HDKC_CONF_TMP_FILE} ]; then
	\${ECHO} "\${CRED}\${CREV}[ERROR]\${CDEF}\${CRED} Could not make \${K2HDKC_CONF_TMP_FILE} from resource.\${CDEF}" 1>&2
	\${RM} -f \${K2HDKC_CONF_TMP_FILE}
	exit 1
fi
\${ECHO} "\${CGRN}\${CREV}[SUCCESS]\${CDEF} \${CURRENT_TIME} Save resource(\${K2HR3_RESOURCE_NAME}) to temporary file(\${K2HDKC_CONF_TMP_FILE}).\${CDEF}" 1>&2

#
# Check updates
#
diff \${K2HDKC_CONF_TMP_FILE} \${K2HDKC_CONF_FILE} >/dev/null 2>&1
if [ \$? -eq 0 ]; then
	#
	# Nothing to update
	#
	\${ECHO} "\${CGRN}\${CREV}[SUCCESS]\${CDEF} \${CURRENT_TIME} There are no changes to the configuration file(\${K2HDKC_CONF_FILE}).\${CDEF}" 1>&2
	\${RM} -f \${K2HDKC_CONF_TMP_FILE}
else
	#
	# Update the file
	#
	\${MV} \${K2HDKC_CONF_TMP_FILE} \${K2HDKC_CONF_FILE} >/dev/null 2>&1
	if [ \$? -ne 0 ]; then
		\${ECHO} "\${CRED}\${CREV}[ERROR]\${CDEF}\${CRED} \${CURRENT_TIME} Could not update the configuration file(\${K2HDKC_CONF_FILE}).\${CDEF}" 1>&2
		\${RM} -f \${K2HDKC_CONF_TMP_FILE}
		exit 1
	fi
	\${ECHO} "\${CGRN}\${CREV}[SUCCESS]\${CDEF} \${CURRENT_TIME} Updated the configuration file(\${K2HDKC_CONF_FILE}).\${CDEF}" 1>&2
fi

exit 0

#
# VIM modelines
#
# vim:set ts=4 fenc=utf-8:
#
EOF
chmod 0755 ${K2HR3_SLAVE_CHECK_CONF_SH_FILE}

echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Create ${K2HR3_SLAVE_CHECK_CONF_SH_FILE} file" | tee -a ${LOGFILE}

#--------------------------------------------------------------
# Start to k2hr3-slave-check-conf.timer
#--------------------------------------------------------------
systemctl enable ${K2HR3_SLAVE_CHECK_CONF_TIMER}
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[WARN]: Could not enable ${K2HR3_SLAVE_CHECK_CONF_TIMER}, but continue..." | tee -a ${LOGFILE}
	exit 1
else
	systemctl start ${K2HR3_SLAVE_CHECK_CONF_TIMER}
	if [ $? -ne 0 ]; then
		echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[WARN]: Could not start ${K2HR3_SLAVE_CHECK_CONF_TIMER}, but continue..." | tee -a ${LOGFILE}
	else
		echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Started ${K2HR3_SLAVE_CHECK_CONF_TIMER}" | tee -a ${LOGFILE}
	fi
fi

#--------------------------------------------------------------
# Set repository for packagecloud.io
#--------------------------------------------------------------
curl -s ${PACKAGECLOUD_IO_URI} | sudo bash
if [ $? -ne 0 ]; then
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not setup packagecloud.io repogitory, but continue..." | tee -a ${LOGFILE}
else
	echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Set packagecloud.io repository." | tee -a ${LOGFILE}

	${PACKAGEMAN} install -y k2hdkc
	if [ $? -ne 0 ]; then
		echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[ERROR]: Could not install k2hdkc package, but continue..." | tee -a ${LOGFILE}
	else
		echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Installed k2hdkc package." | tee -a ${LOGFILE}
	fi
fi

#--------------------------------------------------------------
# Finish
#--------------------------------------------------------------
echo "`date "+%Y-%m-%d %H:%M:%S,%3N"` - ${SCRIPTNAME}[INFO]: Finish to initialize information for k2hr3" | tee -a ${LOGFILE}

exit 0

#
# Local variables:
# tab-width: 4
# c-basic-offset: 4
# End:
# vim600: noexpandtab sw=4 ts=4 fdm=marker
# vim<600: noexpandtab sw=4 ts=4
#
